/*
 * Copyright (c) 2019 ETH Zurich
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

function object___bool__(self: Ref) : Bool
    ensures self == null ==> !result
    // We can't actually say that the result is true if self is not None, because
    // this is not the case for collections.
    ensures self != null ==> (let t == (typeof(self)) in ((!issubtypelist(t, list_arg(t, 0)) &&
                                                           !issubtypeset(t, set_arg(t, 0)) &&
                                                           !issubtypedict(t, dict_arg(t, 0), dict_arg(t, 1))) ==> result))

function NoneType___bool__(self: Ref) : Bool
    ensures self == null ==> !result

function object___str__(self: Ref) : Ref
    ensures issubtypestr(typeof(result))

function bool___bool__(self: Ref) : Bool
    requires self != null ==> issubtypebool(typeof(self))
    ensures self == null ==> !result
    ensures self != null ==> result == bool___unbox__(self)

function int___bool__(self: Ref) : Bool
    requires self != null ==> issubtypeint(typeof(self))
    ensures self == null ==> !result
    ensures self != null ==> result == (int___unbox__(self) != 0)

function __prim__int___box__(prim: Int): Ref
    ensures typeof(result) == int()
    ensures int___unbox__(result) == prim
    //ensures forall other: Int :: {__prim__int___box__(other)} ((__prim__int___box__(other) == result) <==> (other == prim))

function int___unbox__(box: Ref): Int
    requires issubtypeint(typeof(box))
    ensures !issubtypebool(typeof(box)) ==> __prim__int___box__(result) == box
    ensures issubtypebool(typeof(box)) ==> __prim__bool___box__(result != 0) == box

function __prim__bool___box__(prim: Bool): Ref
    ensures typeof(result) == bool()
    ensures bool___unbox__(result) == prim
    ensures int___unbox__(result) == (prim ? 1 : 0)

function bool___unbox__(box: Ref): Bool
    requires issubtypebool(typeof(box))
    ensures __prim__bool___box__(result) == box

function int___eq__(self: Ref, other: Ref): Bool
    requires issubtypeint(typeof(self))
    requires issubtypeint(typeof(other))
{
    int___unbox__(self) == int___unbox__(other)
}

function bool___eq__(self: Ref, other: Ref): Bool
    requires issubtypebool(typeof(self))
    requires issubtypebool(typeof(other))
{
    bool___unbox__(self) == bool___unbox__(other)
}

function int___ge__(self: Int, other: Int): Bool
{
    self >= other
}

function int___gt__(self: Int, other: Int): Bool
{
    self > other
}

function int___le__(self: Int, other: Int): Bool
{
    self <= other
}

function int___lt__(self: Int, other: Int): Bool
{
    self < other
}

function int___add__(self: Int, other: Int): Int
{
    self + other
}

function int___sub__(self: Int, other: Int): Int
{
    self - other
}

function int___mul__(self: Int, other: Int): Int
{
    self * other
}

function int___floordiv__(self: Int, other: Int): Int
    requires other != 0
{
    self \ other
}

function int___div__(self: Int, other: Int): Ref
    requires other != 0
    ensures (self % other == 0) ==> (typeof(result) == int() && int___unbox__(result) == self \ other)
    ensures (self % other != 0) ==> typeof(result) == float()

function int___mod__(self: Int, other: Int): Int
    requires other != 0
{
    self % other
}

function float___create__(i: Int): Ref
    ensures typeof(result) == float()

function float___bool__(self: Ref): Bool
    requires self != null ==> issubtypefloat(typeof(self))
    ensures self == null ==> !result
    ensures issubtypeint(typeof(self)) ==> (result == int___bool__(self))

function float___int__(self: Ref): Ref
    requires issubtypefloat(typeof(self))
    ensures typeof(result) == int()

function float___ge__(self: Ref, other: Ref): Bool
    requires issubtypefloat(typeof(self))
    requires issubtypefloat(typeof(other))
    ensures (issubtypeint(typeof(self)) && issubtypeint(typeof(other))) ==>
            (result == int___ge__(int___unbox__(self), int___unbox__(other)))

function float___gt__(self: Ref, other: Ref): Bool
    requires issubtypefloat(typeof(self))
    requires issubtypefloat(typeof(other))
    ensures (issubtypeint(typeof(self)) && issubtypeint(typeof(other))) ==>
            (result == int___gt__(int___unbox__(self), int___unbox__(other)))

function float___le__(self: Ref, other: Ref): Bool
    requires issubtypefloat(typeof(self))
    requires issubtypefloat(typeof(other))
    ensures (issubtypeint(typeof(self)) && issubtypeint(typeof(other))) ==>
            (result == int___le__(int___unbox__(self), int___unbox__(other)))

function float___lt__(self: Ref, other: Ref): Bool
    requires issubtypefloat(typeof(self))
    requires issubtypefloat(typeof(other))
    ensures (issubtypeint(typeof(self)) && issubtypeint(typeof(other))) ==>
            (result == int___lt__(int___unbox__(self), int___unbox__(other)))

function float___eq__(self: Ref, other: Ref): Bool
    requires issubtypefloat(typeof(self))
    requires issubtypefloat(typeof(other))
    ensures (issubtypeint(typeof(self)) && issubtypeint(typeof(other))) ==>
            (result == int___eq__(self, other))

function float___add__(self: Ref, other: Ref): Ref
    requires issubtypefloat(typeof(self))
    requires issubtypefloat(typeof(other))
    ensures issubtypefloat(typeof(result))
    ensures (issubtypeint(typeof(self)) && issubtypeint(typeof(other))) ==>
            (result == __prim__int___box__(int___add__(int___unbox__(self), int___unbox__(other))))

function float___sub__(self: Ref, other: Ref): Ref
    requires issubtypefloat(typeof(self))
    requires issubtypefloat(typeof(other))
    ensures issubtypefloat(typeof(result))
    ensures (issubtypeint(typeof(self)) && issubtypeint(typeof(other))) ==>
            (result == __prim__int___box__(int___sub__(int___unbox__(self), int___unbox__(other))))

function float___mul__(self: Ref, other: Ref): Ref
    requires issubtypefloat(typeof(self))
    requires issubtypefloat(typeof(other))
    ensures issubtypefloat(typeof(result))
    ensures (issubtypeint(typeof(self)) && issubtypeint(typeof(other))) ==>
            (result == __prim__int___box__(int___mul__(int___unbox__(self), int___unbox__(other))))

function float___div__(self: Ref, other: Ref): Ref
    requires issubtypefloat(typeof(self))
    requires issubtypefloat(typeof(other))
    requires issubtypeint(typeof(other)) ==> int___unbox__(other) != 0
    requires issubtypeint(typeof(other))  // cannot express non-zero at the moment
    ensures issubtypefloat(typeof(result))
    ensures (issubtypeint(typeof(self)) && issubtypeint(typeof(other))) ==>
            (result == int___div__(int___unbox__(self), int___unbox__(other)))

function int___int__(self: Ref): Ref
    requires issubtypeint(typeof(self))
    ensures result == self

function object___eq__(self: Ref, other: Ref): Bool
    ensures self == other ==> result
    ensures ((self == null) != (other == null)) ==> !result

function Place___eq__(self: Ref, other: Ref): Bool
    ensures result == (self == other)

function object___cast__(typ: PyType, obj: Ref): Ref
    requires issubtype(typeof(obj), typ)
    ensures result == obj
    ensures issubtype(typeof(obj), typ)

function max(a: Ref, b: Ref): Int
    requires (issubtypeint(typeof(a)) && issubtypeint(typeof(b))) ||
             (issubtypelist(typeof(a), int()) && b == null)
    requires issubtypelist(typeof(a), int()) ==> acc(a.list_acc, 1/100) && list___len__(a) > 0
    ensures issubtypeint(typeof(a)) ==> result == ((int___unbox__(a) > int___unbox__(b)) ? int___unbox__(a) : int___unbox__(b))
    ensures issubtypelist(typeof(a), int()) ==> list___contains__(a, __prim__int___box__(result))

function min(a: Ref, b: Ref): Int
    requires (issubtypeint(typeof(a)) && issubtypeint(typeof(b))) ||
             (issubtypelist(typeof(a), int()) && b == null)
    requires issubtypelist(typeof(a), int()) ==>  acc(a.list_acc, 1/100) && list___len__(a) > 0
    ensures issubtypeint(typeof(a)) ==> result == ((int___unbox__(a) > int___unbox__(b)) ? int___unbox__(b) : int___unbox__(a))
    ensures issubtypelist(typeof(a), int()) ==> list___contains__(a, __prim__int___box__(result))

function abs(a: Int): Int
    ensures result == (a >= 0 ? a : -a)